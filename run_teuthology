#!/usr/bin/env python

import logging
import os
import subprocess
import time

from datetime import datetime, timedelta
from optparse import OptionParser

def makedir_exist(name):
        try:
            pass
#            os.mkdir(name)
        except OSError as e:
            if e.errno == errno.EEXIST:
                pass
            raise

USAGE = """
run_teuthology (options) [revision] [task]...
"""

parser = OptionParser(USAGE)
parser.add_option("-w", "--workunits", action="store_true", dest="workunits",
                  help="Comma-separated list of ceph workunits to run "
                  "(in addition to other tasks)")
parser.add_option("-s", "--shared", type="string", dest="shared_config",
                  help="A file containing teuthology roles to use for each "
                  "task (and workunits). If this is not specified, each task "
                  "must define everything it needs.")
parser.add_option("-v", "--virtualenv", type="string", dest="venv",
                  help="Location on the virtual env for teuthology")

(opts, args) = parser.parse_args()

if len(args) < 1:
   print "You must specify the revision to test."
   exit(1)

if len(args) < 2 and not opts.workunits:
    print "You must specify at least one task, or workunits to run."
    exit(1)

if opts.workunits is None:
    workunits = []
else:
    print "TODO: workunits not yet supported"
    exit(1)

sha1 = args[0]
tasks = args[1:]
venv = "./virtualenv"
if opts.venv is not None:
    venv = opts.venv

timestamp = datetime.utcnow().strftime("%Y-%m-%d_%H-%M-%S")
base_dir = os.path.join(sha1, timestamp)
os.makedirs(base_dir, 0755)

log = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG,
                    filename=os.path.join(base_dir, "test.log"))

timeout = 60 * 60 * 3 # 3 hours

# TODO: schedule over many machines and parallelize
for task in tasks:
    try:
        taskname = task
        if task.endswith('.yml') or task.endswith('.yaml'):
            taskname = task.rsplit('.', 1)[0]
        taskdir = os.path.join(base_dir, taskname.replace('/', '_'))

        args = ["{base}/bin/teuthology".format(base=venv),
                '--archive', taskdir]
        if opts.shared_config is not None:
            args.append(opts.shared_config)
        args.append(task)

        started = datetime.utcnow()
        log.info("Running task {name}".format(name=taskname))
        log.debug("command is: " + ' '.join(args))
        subproc = subprocess.Popen(args)

        while True:
            curtime = datetime.utcnow()
            if subproc.poll():
                retcode = subproc.retcode
                break
            elif started + timedelta(0, timeout) > curtime:
                log.error("Timeout expired. Terminating task.")
                makedir_exist(taskdir)
                with open(os.path.join(taskdir, 'timeout'), 'w'):
                    pass
                subproc.terminate()
                retcode = 1
                break
            time.sleep(1)

        if retcode > 0:
            log.error("Task {name} returned {code}".format(name=taskname,
                                                           code=retcode))
            makedir_exist(taskdir)
            with open(os.path.join(taskdir, 'failure'), 'w'):
                pass
        else:
            log.info("Task {name} finished after {elapsed} seconds".format(
                    name=taskname,
                    elapsed=(curtime - started).total_seconds()
                    ))
            with open(os.path.join(taskdir, 'success'), 'w'):
                pass
    except:
        log.exception("Exception while running task {name}".format(
                name=taskname))
        makedir_exist(taskdir)
        with open(os.path.join(taskdir, 'failure'), 'w'):
            pass
